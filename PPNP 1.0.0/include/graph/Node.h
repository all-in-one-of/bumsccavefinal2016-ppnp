#ifndef NODE_H
#define NODE_H

#include <memory>

#include <ngl/Util.h>
#include <ngl/VertexArrayObject.h>
#include <ngl/Camera.h>

namespace ppnp
{
//----------------------------------------------------------------------------------------------------------------------
/// @class Node
/// @brief Class for node in graphs
/// @author Erika Camilleri
/// @version 1.0
/// @date 06/16/16
//----------------------------------------------------------------------------------------------------------------------

class Node
{
  public:
    struct Edge {
      Node * adjacent;
      ngl::Real weight;
      ngl::Real length;
    };
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief constructor
    //----------------------------------------------------------------------------------------------------------------------
    Node(const int &_index, const ngl::Vec3 &_pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief deconstructor
    //----------------------------------------------------------------------------------------------------------------------
    ~Node();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief command for drawing
    //----------------------------------------------------------------------------------------------------------------------
    void draw(ngl::Mat4 _mouseGlobalTX, ngl::Camera _cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief command for drawing
    //----------------------------------------------------------------------------------------------------------------------
    void addEdge (Node * _next, ngl::Real _weight = 0, ngl::Real _length = 0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Position of the node
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_pos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief index and unique id for node
    //----------------------------------------------------------------------------------------------------------------------
    int m_index;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief vertex array object for the data
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Node::Edge> m_edges;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reference pointer to the previous node
    //----------------------------------------------------------------------------------------------------------------------
    Node* m_previous;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief calculated uv for the specific node (which can also be seen as a vetex)
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec2 m_uv;

    bool m_isEligableEndPoint;
  protected:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief vertex array object for the data regarding the node positions
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr <ngl::VertexArrayObject> m_vaoNode;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief vertex array object for the data regarding the edges
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr <ngl::VertexArrayObject> m_vaoEdges;
  private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief put drawable data in the appropriate buffers
    //----------------------------------------------------------------------------------------------------------------------
    bool m_vaosReady;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief put drawable data in the appropriate buffers
    //----------------------------------------------------------------------------------------------------------------------
    void setupVAOs();
};

} //end namespace ppnp

#endif // NODE_H

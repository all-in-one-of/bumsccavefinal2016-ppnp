#ifndef NGLSCENE_H__
#define NGLSCENE_H__

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Text.h>
#include <ngl/Transformation.h>
#include <QOpenGLWidget>

#include <graph/Lattice.h>
#include <graph/sub/Dendrite.h>
#include <alg/PPNP.h>
#include <utils/BoundingBox.h>

#include <memory>

//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------
class NGLScene : public QOpenGLWidget
{
  Q_OBJECT
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene(QWidget *_parent );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    // Qt 5.5.1 must have this implemented and uses it
    void resizeGL(QResizeEvent *_event);
    // Qt 5.x uses this instead! http://doc.qt.io/qt-5/qopenglwindow.html#resizeGL
    void resizeGL(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that tries to display small text using a 3D point and projecting it to the 2D screen window
    //----------------------------------------------------------------------------------------------------------------------
    void textProject(QString &_text, ngl::Vec3 &_pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that tries to display small text using a 3D point and projecting it to the 2D screen window
    //----------------------------------------------------------------------------------------------------------------------
    void displayLatticeWeights();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that tries to display small text using a 3D point and projecting it to the 2D screen window
    //----------------------------------------------------------------------------------------------------------------------
    void displayNodeIndices();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief displays the distances of each node from selected root. Distances were calculated using path finding
    /// like Dijkstra
    //----------------------------------------------------------------------------------------------------------------------
    void displayDistancesFromRoot();

    void constructLattice(int _latticeOptionIndex, int _weightOptionIndex, std::vector<std::string> _largs, std::vector<std::string> _wargs);
    void setRootByIndex(int _index);
    void calculateDistancesFromRoot();

    void setWeightsDisplay(const bool _display);
    void setIndicesDisplay(const bool _display);
    void setDistancesDisplay(const bool _display);
    void setDisplayAll(const bool _display);
    void setLatticeDisplay(const bool _display);

    void generatePaths(std::vector<int> _endpointIndices);
    void exportPaths();

    void removeEndPointByIndex(const int &_endpointIndex);
    void refinePaths();

    void setImageDisplay(const bool _display);
    void setPathSelected(const int _endpointIndex, const bool _selected);

    std::vector<int> setRandomEndPoints();
    std::vector<int> setRandomEndPoints(const int &_num, const ngl::Vec3 &_minBounds, const ngl::Vec3 &_maxBounds);
    void createBoundingBox(const ngl::Vec3 &_min, const ngl::Vec3 &_max);
    void setBoundingBoxDisplay(const bool _display);
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief turn on/off lattice weights
    //----------------------------------------------------------------------------------------------------------------------
    bool m_weightsDisplay;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief turn on/off node indices
    //----------------------------------------------------------------------------------------------------------------------
    bool m_indicesDisplay;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief turn on/off dijkstra cost
    //----------------------------------------------------------------------------------------------------------------------
    bool m_costingsDisplay;



    bool m_dendritetDisplay;

    bool m_latticeDisplay;


    //----------------------------------------------------------------------------------------------------------------------
    /// @brief buffer to render text
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Text> m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief unique pointer to the classes associated to dendrite
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ppnp::PPNP> m_ppnp;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief store lattice arguments
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<std::string> m_largs;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief store weight function arguments
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<std::string> m_wargs;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief window width
    //----------------------------------------------------------------------------------------------------------------------
    int m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief window height
    //----------------------------------------------------------------------------------------------------------------------
    int m_height;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_transform;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);

    void createCube(GLfloat _scale);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ID for the cube VAO
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_vaoID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load the texture and store the id in m_textureName
    //----------------------------------------------------------------------------------------------------------------------
    void loadTexture();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief opengl texture id for the crate texture
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_textureName;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();


    ngl::VAOPrimitives* m_prim;
};

#endif
